  # Install the required packages
  - name: Install glusterfs required packages
    apt:
      name: "{{ item }}"
      update_cache: yes
    tags: gfs
    with_items:
      - attr
      - glusterfs-server
      - glusterfs-client

  # Setup service
  - name: Ensure GlusterFS is started and enabled at boot
    service:
      name: glusterfs-server
      state: started
      enabled: yes
    tags: gfs

  # Create the brick directories
  - name: Create the root brick directory
    file:
      path: "{{ gfs_brick_root_dir }}/brick{{ item|int - 1 }}"
      state: directory
      mode: 0775
      owner: root
      group: root
    with_sequence: count={{ gfs_additional_volumes|length + 1 }}
    tags: gfs

  #Â In another context than mine (exoscale), you would like to mount a
  # separate volumes to other bricks
  # /data/gfs/brick2, /data/gfs2/brick3, etc...
  - name: Mount the volume for access
    mount:
      name: "{{ gfs_brick_root_dir }}/brick{{ item|int }}"
      src: "dev/{{ gfs_additional_volumes[item] }}"
      opts: defaults
      state: mounted
    with_sequence: count={{ gfs_additional_volumes|length }}
    tags: gfs

  # Create a mount point to work with the volumes
  - name: Create a mount root directory for the volumes
    file:
      path: "{{ gfs_mount_root_dir }}"
      state: directory
      mode: 0775
      owner: root
      group: root
    tags: gfs

  # Peer the hosts of the cluster, with their ips, not the hostnames
  - name: Peer hosts to their mates on the cluster
    shell: "gluster peer probe {{ hostvars[item].ansible_host }}"
    register: gfs_peer_probe
    changed_when: "'already in peer list' not in gfs_peer_probe.stdout"
    failed_when: false
    with_items: "{{ groups['nodes'] }}"
    tags: gfs
